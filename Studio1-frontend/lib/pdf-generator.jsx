import { jsPDF } from "jspdf"
import autoTable from "jspdf-autotable"

export async function generatePDF(data) {
  // Create a new jsPDF instance
  const doc = new jsPDF()

  // Route to the appropriate PDF generator based on document type
  if (data.type === "purchase-order") {
    return generatePurchaseOrderPDF(data)
  } else if (data.type === "wage") {
    return generateWagePDF(data)
  } else if (data.type === "expense") {
    return generateExpensePDF(data)
  } else if (data.type === "proposal") {
    return generateProposalPDF(data)
  } else if (data.type === "bill") {
    return generateBillPDF(data)
  } else if (data.type === "estimate") {
    return generateEstimatePDF(data)
  } else {
    // Generic document
    doc.setFontSize(20)
    doc.setTextColor(40, 40, 40)
    doc.text("FinanceFlow", 105, 20, { align: "center" })

    doc.setFontSize(16)
    doc.text(data.title || "Document", 105, 30, { align: "center" })

    doc.setFontSize(10)
    doc.setTextColor(100, 100, 100)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 40)
    doc.text(`Document ID: ${data.id || "N/A"}`, 20, 45)

    doc.setFontSize(12)
    doc.setTextColor(40, 40, 40)
    doc.text("Document Content", 20, 60)

    if (data.items && data.items.length > 0) {
      generateItemsTable(doc, data.items, 70)
    }

    // Add footer
    addFooter(doc)

    return doc.output("blob")
  }
}

// Helper function to add a footer to all pages
function addFooter(doc) {
  const pageCount = doc.internal.getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(8)
    doc.setTextColor(150, 150, 150)
    doc.text(`Page ${i} of ${pageCount} - Generated by FinanceFlow`, 105, doc.internal.pageSize.height - 10, {
      align: "center",
    })
  }
}

// Purchase Order PDF - Construction/Contractor Style
function generatePurchaseOrderPDF(data) {
  const doc = new jsPDF()

  // Header with logo space
  doc.setFillColor(40, 45, 60) // Dark blue header
  doc.rect(0, 0, 210, 40, "F")

  // Title
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont(undefined, "bold")
  doc.text("PURCHASE ORDER", 20, 25)

  // PO Number
  doc.setFontSize(14)
  doc.text(`PO# ${data.id.split("-")[2] || "1673"}`, 20, 35)
  doc.setFont(undefined, "normal")

  // Company information (top right)
  doc.setFontSize(12)
  doc.text("Studio 1:1 Construction LTD", 130, 15)
  doc.setFontSize(9)
  doc.text("P.O Box 95552-80106, Mombasa, Kenya", 130, 22)
  doc.text("P051811124R", 130, 28)

  // Status indicator
  const status = data.status || "Yet to be Approved"
  doc.setFillColor(255, 240, 230) // Light orange background for status
  doc.rect(130, 40, 70, 10, "F")
  doc.setTextColor(200, 80, 0) // Orange text for status
  doc.setFontSize(10)
  doc.text(`STATUS: ${status.toUpperCase()}`, 135, 47)

  // Reset text color
  doc.setTextColor(40, 40, 40)

  // Vendor information
  doc.setFillColor(245, 245, 245)
  doc.rect(10, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("VENDOR", 15, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.vendor || "Mr. Samir Owango", 15, 70)
  doc.text("Vendor Address Line 1", 15, 77)
  doc.text("Vendor Address Line 2", 15, 84)

  // Purchase Order details
  doc.setFillColor(245, 245, 245)
  doc.rect(110, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("ORDER DETAILS", 115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details
  doc.text("Date:", 115, 70)
  doc.text(data.date || "21 Mar 2025", 160, 70)

  doc.text("Delivery Date:", 115, 77)
  doc.text(data.expectedDelivery || "22 Mar 2025", 160, 77)

  doc.text("Project:", 115, 84)
  doc.text(data.project || "Opollo Residence", 160, 84)

  // Items table
  if (data.items && data.items.length > 0) {
    // Table header
    const tableColumn = ["#", "Item & Description", "Qty", "Unit", "Rate", "Amount"]

    // Format the rows
    const tableRows = data.items.map((item, index) => {
      const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
      const total = item.quantity * price

      return [
        (index + 1).toString(),
        item.name + (item.description ? `\n${item.description}` : ""),
        item.quantity.toString(),
        item.unit || "Bags",
        price.toLocaleString(),
        total.toLocaleString(),
      ]
    })

    // Use autoTable
    autoTable(doc, {
      startY: 100,
      head: [tableColumn],
      body: tableRows,
      theme: "grid",
      headStyles: {
        fillColor: [60, 65, 80],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 10 }, // # column
        1: { cellWidth: 70 }, // Item & Description
        2: { cellWidth: 15 }, // Qty
        3: { cellWidth: 20 }, // Unit
        4: { cellWidth: 30 }, // Rate
        5: { cellWidth: 35 }, // Amount
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Calculate totals
    const subtotal = data.items.reduce((sum, item) => {
      const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
      return sum + item.quantity * price
    }, 0)

    // Add totals section
    const finalY = doc.lastAutoTable.finalY + 10

    // Totals box
    doc.setFillColor(245, 245, 245)
    doc.rect(120, finalY, 80, 40, "F")

    doc.setFontSize(10)
    doc.text("Sub Total:", 125, finalY + 10)
    doc.text("VAT (16%):", 125, finalY + 20)
    doc.text("Total:", 125, finalY + 30)

    const vat = subtotal * 0.16
    const total = subtotal + vat

    doc.text(`KES ${subtotal.toLocaleString()}`, 190, finalY + 10, { align: "right" })
    doc.text(`KES ${vat.toLocaleString()}`, 190, finalY + 20, { align: "right" })
    doc.setFont(undefined, "bold")
    doc.text(`KES ${total.toLocaleString()}`, 190, finalY + 30, { align: "right" })
    doc.setFont(undefined, "normal")

    // Terms and notes
    doc.setFontSize(10)
    doc.setFont(undefined, "bold")
    doc.text("Terms & Conditions", 15, finalY + 10)
    doc.setFont(undefined, "normal")
    doc.setFontSize(8)
    doc.text("1. Please send two copies of your invoice.", 15, finalY + 18)
    doc.text(
      "2. Enter this order in accordance with the prices, terms, delivery method, and specifications listed above.",
      15,
      finalY + 24,
    )
    doc.text("3. Please notify us immediately if you are unable to ship as specified.", 15, finalY + 30)

    // Approval section
    doc.setFontSize(10)
    doc.setFont(undefined, "bold")
    doc.text("Authorized by:", 15, finalY + 45)
    doc.line(15, finalY + 55, 80, finalY + 55)
    doc.setFont(undefined, "normal")
    doc.setFontSize(8)
    doc.text("Signature", 15, finalY + 60)
  }

  // Add footer
  addFooter(doc)

  return doc.output("blob")
}

// Wage PDF - Modern Payroll Style
function generateWagePDF(data) {
  const doc = new jsPDF()

  // Header with gradient-like effect
  doc.setFillColor(70, 130, 180) // Steel blue
  doc.rect(0, 0, 210, 40, "F")

  // Title
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont(undefined, "bold")
  doc.text("WAGE PAYMENT", 20, 25)

  // Wage ID
  doc.setFontSize(14)
  doc.text(`Ref# ${data.id.split("-")[2] || "1673"}`, 20, 35)
  doc.setFont(undefined, "normal")

  // Company information (top right)
  doc.setFontSize(12)
  doc.text("Studio 1:1 Construction LTD", 130, 15)
  doc.setFontSize(9)
  doc.text("P.O Box 95552-80106, Mombasa, Kenya", 130, 22)
  doc.text("P051811124R", 130, 28)

  // Status indicator
  const status = data.status || "Pending"
  doc.setFillColor(240, 240, 255) // Light blue background for status
  doc.rect(130, 40, 70, 10, "F")
  doc.setTextColor(70, 130, 180) // Blue text for status
  doc.setFontSize(10)
  doc.text(`STATUS: ${status.toUpperCase()}`, 135, 47)

  // Reset text color
  doc.setTextColor(40, 40, 40)

  // Employee information
  doc.setFillColor(245, 245, 245)
  doc.rect(10, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("EMPLOYEE", 15, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.employee || "John Smith", 15, 70)
  doc.text(`Department: ${data.department || "Engineering"}`, 15, 77)
  doc.text(`Employee ID: EMP-${data.id.split("-")[2] || "001"}`, 15, 84)

  // Payment details
  doc.setFillColor(245, 245, 245)
  doc.rect(110, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("PAYMENT DETAILS", 115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details
  doc.text("Pay Date:", 115, 70)
  doc.text(data.date || new Date().toLocaleDateString(), 175, 70, { align: "right" })

  doc.text("Pay Period:", 115, 77)
  doc.text(data.payPeriod || "Mar 1-15, 2025", 175, 77, { align: "right" })

  doc.text("Project:", 115, 84)
  doc.text(data.project || "Opollo Residence", 175, 84, { align: "right" })

  // Earnings table
  if (data.details) {
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("EARNINGS", 105, 100, { align: "center" })
    doc.setFont(undefined, "normal")

    // Table header
    const tableColumn = ["Description", "Hours", "Rate", "Amount"]

    // Format the rows
    const regularRate = Number.parseFloat(data.details.regularRate.replace("$", ""))
    const overtimeRate = Number.parseFloat(data.details.overtimeRate.replace("$", ""))
    const regularPay = data.details.regularHours * regularRate
    const overtimePay = data.details.overtimeHours * overtimeRate

    const tableRows = [
      [
        "Regular Hours\nStandard working hours",
        data.details.regularHours.toString(),
        regularRate.toLocaleString(),
        regularPay.toLocaleString(),
      ],
      [
        "Overtime Hours\nAdditional hours worked",
        data.details.overtimeHours.toString(),
        overtimeRate.toLocaleString(),
        overtimePay.toLocaleString(),
      ],
      ["Allowances\nTransport, housing, etc.", "-", "-", "1,200.00"],
    ]

    // Use autoTable
    autoTable(doc, {
      startY: 105,
      head: [tableColumn],
      body: tableRows,
      theme: "grid",
      headStyles: {
        fillColor: [70, 130, 180],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 80 }, // Description
        1: { cellWidth: 30 }, // Hours
        2: { cellWidth: 30 }, // Rate
        3: { cellWidth: 40 }, // Amount
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Deductions table
    const deductionsY = doc.lastAutoTable.finalY + 15
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("DEDUCTIONS", 105, deductionsY, { align: "center" })
    doc.setFont(undefined, "normal")

    const deductions = Number.parseFloat(data.details.deductions.replace("$", ""))

    // Deductions table
    const deductionsColumn = ["Description", "Amount"]
    const deductionsRows = [
      ["Tax\nPAYE", (deductions * 0.3).toLocaleString()],
      ["NHIF\nNational Hospital Insurance Fund", (deductions * 0.1).toLocaleString()],
      ["NSSF\nNational Social Security Fund", (deductions * 0.1).toLocaleString()],
      ["Other Deductions\nAdvances, loans, etc.", (deductions * 0.5).toLocaleString()],
    ]

    autoTable(doc, {
      startY: deductionsY + 5,
      head: [deductionsColumn],
      body: deductionsRows,
      theme: "grid",
      headStyles: {
        fillColor: [70, 130, 180],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 140 }, // Description
        1: { cellWidth: 40 }, // Amount
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Calculate totals
    const grossPay = regularPay + overtimePay + 1200
    const netPay = grossPay - deductions

    // Summary box
    const summaryY = doc.lastAutoTable.finalY + 15
    doc.setFillColor(245, 245, 245)
    doc.rect(110, summaryY, 80, 40, "F")

    doc.setFontSize(10)
    doc.text("Gross Pay:", 115, summaryY + 10)
    doc.text("Total Deductions:", 115, summaryY + 20)
    doc.text("Net Pay:", 115, summaryY + 30)

    doc.text(`KES ${grossPay.toLocaleString()}`, 180, summaryY + 10, { align: "right" })
    doc.text(`KES ${deductions.toLocaleString()}`, 180, summaryY + 20, { align: "right" })
    doc.setFont(undefined, "bold")
    doc.text(`KES ${netPay.toLocaleString()}`, 180, summaryY + 30, { align: "right" })
    doc.setFont(undefined, "normal")

    // Payment method
    doc.setFontSize(10)
    doc.setFont(undefined, "bold")
    doc.text("PAYMENT METHOD", 15, summaryY + 10)
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text("Bank Transfer", 15, summaryY + 18)
    doc.text("Bank: Kenya Commercial Bank", 15, summaryY + 25)
    doc.text("Account: XXXX-XXXX-XXXX-1234", 15, summaryY + 32)

    // Signature section
    const signatureY = summaryY + 50
    doc.setFontSize(10)
    doc.text("Employee Signature: _______________________", 15, signatureY)
    doc.text("Date: _______________", 15, signatureY + 10)

    doc.text("Employer Signature: _______________________", 115, signatureY)
    doc.text("Date: _______________", 115, signatureY + 10)
  }

  // Add footer
  addFooter(doc)

  return doc.output("blob")
}

// Expense PDF - Clean Corporate Style
function generateExpensePDF(data) {
  const doc = new jsPDF()

  // Header with accent color
  doc.setFillColor(50, 120, 80) // Forest green
  doc.rect(0, 0, 210, 40, "F")

  // Title
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont(undefined, "bold")
  doc.text("EXPENSE REPORT", 20, 25)

  // Expense ID
  doc.setFontSize(14)
  doc.text(`Report# ${data.id.split("-")[2] || "1673"}`, 20, 35)
  doc.setFont(undefined, "normal")

  // Company information (top right)
  doc.setFontSize(12)
  doc.text("Studio 1:1 Construction LTD", 130, 15)
  doc.setFontSize(9)
  doc.text("P.O Box 95552-80106, Mombasa, Kenya", 130, 22)
  doc.text("P051811124R", 130, 28)

  // Status indicator
  const status = data.status || "Pending"
  doc.setFillColor(230, 250, 240) // Light green background for status
  doc.rect(130, 40, 70, 10, "F")
  doc.setTextColor(50, 120, 80) // Green text for status
  doc.setFontSize(10)
  doc.text(`STATUS: ${status.toUpperCase()}`, 135, 47)

  // Reset text color
  doc.setTextColor(40, 40, 40)

  // Submitted by information
  doc.setFillColor(245, 245, 245)
  doc.rect(10, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("SUBMITTED BY", 15, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.submittedBy || "John Smith", 15, 70)
  doc.text(`Employee ID: EMP-${data.id.split("-")[2] || "001"}`, 15, 77)
  doc.text(`Department: ${data.department || "Engineering"}`, 15, 84)

  // Expense details
  doc.setFillColor(245, 245, 245)
  doc.rect(110, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("EXPENSE DETAILS", 115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details
  doc.text("Date:", 115, 70)
  doc.text(data.date || new Date().toLocaleDateString(), 175, 70, { align: "right" })

  doc.text("Category:", 115, 77)
  doc.text(data.category || "Travel", 175, 77, { align: "right" })

  doc.text("Project:", 115, 84)
  doc.text(data.project || "Opollo Residence", 175, 84, { align: "right" })

  // Description
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("DESCRIPTION", 15, 100)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.description || "Business trip to New York", 15, 110)

  // Expense items table
  if (data.details && data.details.length > 0) {
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("EXPENSE ITEMS", 105, 130, { align: "center" })
    doc.setFont(undefined, "normal")

    // Table header
    const tableColumn = ["#", "Item", "Date", "Category", "Amount"]

    // Format the rows
    const tableRows = data.details.map((detail, index) => {
      const amount =
        typeof detail.amount === "string" ? Number.parseFloat(detail.amount.replace("$", "")) : detail.amount

      return [
        (index + 1).toString(),
        detail.item,
        data.date || new Date().toLocaleDateString(),
        data.category || "Expense item",
        amount.toLocaleString(),
      ]
    })

    // Use autoTable
    autoTable(doc, {
      startY: 135,
      head: [tableColumn],
      body: tableRows,
      theme: "grid",
      headStyles: {
        fillColor: [50, 120, 80],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 15 }, // #
        1: { cellWidth: 60 }, // Item
        2: { cellWidth: 30 }, // Date
        3: { cellWidth: 40 }, // Category
        4: { cellWidth: 35 }, // Amount
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Calculate totals
    const subtotal = data.details.reduce((sum, detail) => {
      const amount =
        typeof detail.amount === "string" ? Number.parseFloat(detail.amount.replace("$", "")) : detail.amount
      return sum + amount
    }, 0)

    // Add totals section
    const finalY = doc.lastAutoTable.finalY + 10

    // Totals box
    doc.setFillColor(245, 245, 245)
    doc.rect(120, finalY, 80, 30, "F")

    doc.setFontSize(10)
    doc.text("Sub Total:", 125, finalY + 10)
    doc.text("VAT (16%):", 125, finalY + 20)

    const vat = subtotal * 0.16
    const total = subtotal + vat

    doc.text(`KES ${subtotal.toLocaleString()}`, 190, finalY + 10, { align: "right" })
    doc.text(`KES ${vat.toLocaleString()}`, 190, finalY + 20, { align: "right" })

    // Total amount
    doc.setFillColor(50, 120, 80)
    doc.rect(120, finalY + 30, 80, 15, "F")
    doc.setTextColor(255, 255, 255)
    doc.setFont(undefined, "bold")
    doc.text("TOTAL:", 125, finalY + 40)
    doc.text(`KES ${total.toLocaleString()}`, 190, finalY + 40, { align: "right" })
    doc.setTextColor(40, 40, 40)
    doc.setFont(undefined, "normal")

    // Payment method
    doc.setFontSize(10)
    doc.setFont(undefined, "bold")
    doc.text("PAYMENT METHOD", 15, finalY + 10)
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text("Reimbursement via Bank Transfer", 15, finalY + 18)
    doc.text("Bank: Kenya Commercial Bank", 15, finalY + 25)
    doc.text("Account: XXXX-XXXX-XXXX-1234", 15, finalY + 32)

    // Approval section
    const approvalY = finalY + 55
    doc.setFontSize(10)
    doc.setFont(undefined, "bold")
    doc.text("APPROVALS", 105, approvalY, { align: "center" })
    doc.setFont(undefined, "normal")

    doc.text("Submitted by: _______________________", 15, approvalY + 15)
    doc.text("Date: _______________", 15, approvalY + 25)

    doc.text("Approved by: _______________________", 115, approvalY + 15)
    doc.text("Date: _______________", 115, approvalY + 25)
  }

  // Add footer
  addFooter(doc)

  return doc.output("blob")
}

// Proposal PDF - Professional Business Proposal Style
function generateProposalPDF(data) {
  const doc = new jsPDF()

  // Header with accent color
  doc.setFillColor(80, 90, 120) // Navy blue
  doc.rect(0, 0, 210, 40, "F")

  // Title
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont(undefined, "bold")
  doc.text("BUSINESS PROPOSAL", 20, 25)

  // Proposal ID
  doc.setFontSize(14)
  doc.text(`Proposal# ${data.id.split("-")[2] || "1673"}`, 20, 35)
  doc.setFont(undefined, "normal")

  // Company information (top right)
  doc.setFontSize(12)
  doc.text("Studio 1:1 Construction LTD", 130, 15)
  doc.setFontSize(9)
  doc.text("P.O Box 95552-80106, Mombasa, Kenya", 130, 22)
  doc.text("P051811124R", 130, 28)

  // Status indicator
  const status = data.status || "Draft"
  doc.setFillColor(235, 235, 245) // Light blue/gray background for status
  doc.rect(130, 40, 70, 10, "F")
  doc.setTextColor(80, 90, 120) // Navy blue text for status
  doc.setFontSize(10)
  doc.text(`STATUS: ${status.toUpperCase()}`, 135, 47)

  // Reset text color
  doc.setTextColor(40, 40, 40)

  // Client information
  doc.setFillColor(245, 245, 245)
  doc.rect(10, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("CLIENT", 15, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.client || "Acme Corporation", 15, 70)
  doc.text("Client Address Line 1", 15, 77)
  doc.text("Client Address Line 2", 15, 84)

  // Proposal details
  doc.setFillColor(245, 245, 245)
  doc.rect(110, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("PROPOSAL DETAILS", 115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details  115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details
  doc.text("Date:", 115, 70)
  doc.text(data.date || new Date().toLocaleDateString(), 175, 70, { align: "right" })

  doc.text("Expiry Date:", 115, 77)
  doc.text(data.expiryDate || new Date(new Date().setDate(new Date().getDate() + 30)).toLocaleDateString(), 175, 77, {
    align: "right",
  })

  doc.text("Project:", 115, 84)
  doc.text(data.project || "Opollo Residence", 175, 84, { align: "right" })

  // Proposal title and description
  doc.setFontSize(14)
  doc.setFont(undefined, "bold")
  doc.text(data.title || "Project Proposal", 105, 100, { align: "center" })
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)

  // Description with word wrapping
  const description =
    data.description || "This proposal outlines the scope, timeline, and cost for the requested services."
  const splitDescription = doc.splitTextToSize(description, 180)
  doc.text(splitDescription, 15, 110)

  // Sections/Services table
  if (data.sections && data.sections.length > 0) {
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("PROPOSED SERVICES", 105, 130, { align: "center" })
    doc.setFont(undefined, "normal")

    // Table header
    const tableColumn = ["#", "Service", "Description", "Quantity", "Rate", "Amount"]

    // Format the rows
    const tableRows = data.sections.map((section, index) => {
      const amount =
        typeof section.amount === "string" ? Number.parseFloat(section.amount.replace("$", "")) : section.amount

      return [
        (index + 1).toString(),
        section.name,
        section.description || "Professional service",
        "1",
        amount.toLocaleString(),
        amount.toLocaleString(),
      ]
    })

    // Use autoTable
    autoTable(doc, {
      startY: 135,
      head: [tableColumn],
      body: tableRows,
      theme: "grid",
      headStyles: {
        fillColor: [80, 90, 120],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 10 }, // #
        1: { cellWidth: 40 }, // Service
        2: { cellWidth: 50 }, // Description
        3: { cellWidth: 20 }, // Quantity
        4: { cellWidth: 30 }, // Rate
        5: { cellWidth: 30 }, // Amount
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Calculate totals
    const subtotal = data.sections.reduce((sum, section) => {
      const amount =
        typeof section.amount === "string" ? Number.parseFloat(section.amount.replace("$", "")) : section.amount
      return sum + amount
    }, 0)

    // Add totals section
    const finalY = doc.lastAutoTable.finalY + 10

    // Totals box
    doc.setFillColor(245, 245, 245)
    doc.rect(120, finalY, 80, 30, "F")

    doc.setFontSize(10)
    doc.text("Sub Total:", 125, finalY + 10)
    doc.text("VAT (16%):", 125, finalY + 20)

    const vat = subtotal * 0.16
    const total = subtotal + vat

    doc.text(`KES ${subtotal.toLocaleString()}`, 190, finalY + 10, { align: "right" })
    doc.text(`KES ${vat.toLocaleString()}`, 190, finalY + 20, { align: "right" })

    // Total amount
    doc.setFillColor(80, 90, 120)
    doc.rect(120, finalY + 30, 80, 15, "F")
    doc.setTextColor(255, 255, 255)
    doc.setFont(undefined, "bold")
    doc.text("TOTAL:", 125, finalY + 40)
    doc.text(`KES ${total.toLocaleString()}`, 190, finalY + 40, { align: "right" })
    doc.setTextColor(40, 40, 40)
    doc.setFont(undefined, "normal")

    // Project timeline
    const timelineY = finalY + 55
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("PROJECT TIMELINE", 105, timelineY, { align: "center" })
    doc.setFont(undefined, "normal")
    doc.setFontSize(10)

    // Timeline table
    const timelineColumn = ["Phase", "Description", "Duration"]
    const timelineRows = [
      ["Phase 1", "Project Initiation and Planning", "2 weeks"],
      ["Phase 2", "Development and Implementation", "4 weeks"],
      ["Phase 3", "Testing and Quality Assurance", "2 weeks"],
      ["Phase 4", "Deployment and Training", "2 weeks"],
    ]

    autoTable(doc, {
      startY: timelineY + 5,
      head: [timelineColumn],
      body: timelineRows,
      theme: "grid",
      headStyles: {
        fillColor: [80, 90, 120],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Terms and conditions
    const termsY = doc.lastAutoTable.finalY + 15
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("TERMS AND CONDITIONS", 105, termsY, { align: "center" })
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)

    const terms = [
      "1. This proposal is valid for 30 days from the date of issue.",
      "2. Payment terms: 50% deposit upon acceptance, 50% upon completion.",
      "3. Changes to the scope of work may result in additional charges.",
      "4. All deliverables remain the property of Studio 1:1 Construction LTD until full payment is received.",
      "5. This proposal and the included pricing are confidential and should not be shared with third parties.",
    ]

    let termY = termsY + 10
    terms.forEach((term) => {
      doc.text(term, 15, termY)
      termY += 7
    })

    // Signature section
    const signatureY = termY + 15
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("ACCEPTANCE", 105, signatureY, { align: "center" })
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text(
      "By signing below, you acknowledge that you have read, understood, and agree to the terms and conditions outlined in this proposal.",
      15,
      signatureY + 10,
    )

    // Client signature
    doc.text("Client Signature: ", 15, signatureY + 25)
    doc.setDrawColor(200, 200, 200)
    doc.line(60, signatureY + 25, 170, signatureY + 25)

    doc.text("Print Name: ", 15, signatureY + 40)
    doc.line(60, signatureY + 40, 170, signatureY + 40)

    doc.text("Date: ", 15, signatureY + 55)
    doc.line(60, signatureY + 55, 170, signatureY + 55)

    // Company signature
    doc.text("For Studio 1:1 Construction LTD: ", 15, signatureY + 70)
    doc.setDrawColor(200, 200, 200)
    doc.line(90, signatureY + 70, 170, signatureY + 70)

    doc.text("Position: ", 15, signatureY + 85)
    doc.line(60, signatureY + 85, 170, signatureY + 85)

    doc.text("Date: ", 15, signatureY + 100)
    doc.line(60, signatureY + 100, 170, signatureY + 100)
  }

  // Add footer
  addFooter(doc)

  return doc.output("blob")
}

// Bill PDF - Professional Invoice Style
function generateBillPDF(data) {
  const doc = new jsPDF()

  // Header with accent color
  doc.setFillColor(180, 50, 50) // Dark red
  doc.rect(0, 0, 210, 40, "F")

  // Title
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont(undefined, "bold")
  doc.text("INVOICE", 20, 25)

  // Bill ID
  doc.setFontSize(14)
  doc.text(`Invoice# ${data.id.split("-")[2] || "1673"}`, 20, 35)
  doc.setFont(undefined, "normal")

  // Company information (top right)
  doc.setFontSize(12)
  doc.text("Studio 1:1 Construction LTD", 130, 15)
  doc.setFontSize(9)
  doc.text("P.O Box 95552-80106, Mombasa, Kenya", 130, 22)
  doc.text("P051811124R", 130, 28)

  // Status indicator
  const status = data.status || "Unpaid"
  doc.setFillColor(255, 235, 235) // Light red background for status
  doc.rect(130, 40, 70, 10, "F")
  doc.setTextColor(180, 50, 50) // Red text for status
  doc.setFontSize(10)
  doc.text(`STATUS: ${status.toUpperCase()}`, 135, 47)

  // Reset text color
  doc.setTextColor(40, 40, 40)

  // Bill to information
  doc.setFillColor(245, 245, 245)
  doc.rect(10, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("BILL TO", 15, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.vendor || "Vendor Name", 15, 70)
  doc.text("Client Address Line 1", 15, 77)
  doc.text("Client Address Line 2", 15, 84)

  // Invoice details
  doc.setFillColor(245, 245, 245)
  doc.rect(110, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("INVOICE DETAILS", 115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details
  doc.text("Invoice Date:", 115, 70)
  doc.text(data.date || new Date().toLocaleDateString(), 175, 70, { align: "right" })

  doc.text("Due Date:", 115, 77)
  doc.text(data.dueDate || new Date(new Date().setDate(new Date().getDate() + 30)).toLocaleDateString(), 175, 77, {
    align: "right",
  })

  doc.text("Project:", 115, 84)
  doc.text(data.project || "Opollo Residence", 175, 84, { align: "right" })

  // Balance due
  doc.setFillColor(180, 50, 50)
  doc.rect(110, 95, 90, 25, "F")
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(12)
  doc.setFont(undefined, "bold")
  doc.text("BALANCE DUE", 115, 105)
  doc.setFontSize(14)
  doc.text(`KES ${data.amount.replace("$", "")}`, 175, 115, { align: "right" })
  doc.setTextColor(40, 40, 40)
  doc.setFont(undefined, "normal")

  // Items table
  if (data.items && data.items.length > 0) {
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("INVOICE ITEMS", 105, 130, { align: "center" })
    doc.setFont(undefined, "normal")

    // Table header
    const tableColumn = ["#", "Item & Description", "Qty", "Rate", "Amount"]

    // Format the rows
    const tableRows = data.items.map((item, index) => {
      const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
      const total = item.quantity * price

      return [
        (index + 1).toString(),
        item.name + (item.description ? `\n${item.description}` : ""),
        item.quantity.toString(),
        price.toLocaleString(),
        total.toLocaleString(),
      ]
    })

    // Use autoTable
    autoTable(doc, {
      startY: 135,
      head: [tableColumn],
      body: tableRows,
      theme: "grid",
      headStyles: {
        fillColor: [180, 50, 50],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 15 }, // #
        1: { cellWidth: 75 }, // Item & Description
        2: { cellWidth: 20 }, // Qty
        3: { cellWidth: 30 }, // Rate
        4: { cellWidth: 40 }, // Amount
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Calculate totals
    const subtotal = data.items.reduce((sum, item) => {
      const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
      return sum + item.quantity * price
    }, 0)

    // Add totals section
    const finalY = doc.lastAutoTable.finalY + 10

    // Totals box
    doc.setFillColor(245, 245, 245)
    doc.rect(120, finalY, 80, 40, "F")

    doc.setFontSize(10)
    doc.text("Sub Total:", 125, finalY + 10)
    doc.text("VAT (16%):", 125, finalY + 20)
    doc.text("Total:", 125, finalY + 30)

    const vat = subtotal * 0.16
    const total = subtotal + vat

    doc.text(`KES ${subtotal.toLocaleString()}`, 190, finalY + 10, { align: "right" })
    doc.text(`KES ${vat.toLocaleString()}`, 190, finalY + 20, { align: "right" })
    doc.setFont(undefined, "bold")
    doc.text(`KES ${total.toLocaleString()}`, 190, finalY + 30, { align: "right" })
    doc.setFont(undefined, "normal")

    // Payment information
    doc.setFontSize(11)
    doc.setFont(undefined, "bold")
    doc.text("PAYMENT INFORMATION", 15, finalY + 10)
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text("Bank: Kenya Commercial Bank", 15, finalY + 20)
    doc.text("Account Name: Studio 1:1 Construction LTD", 15, finalY + 27)
    doc.text("Account Number: 1234567890", 15, finalY + 34)
    doc.text("Swift Code: KCBLKENX", 15, finalY + 41)

    // Notes
    const notesY = finalY + 55
    doc.setFontSize(11)
    doc.setFont(undefined, "bold")
    doc.text("NOTES", 15, notesY)
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text("1. Please include the invoice number in your payment reference.", 15, notesY + 10)
    doc.text("2. Payment is due within 30 days of invoice date.", 15, notesY + 17)
    doc.text("3. Late payments are subject to a 1.5% monthly interest charge.", 15, notesY + 24)

    // Thank you note
    doc.setFillColor(245, 245, 245)
    doc.rect(0, notesY + 35, 210, 20, "F")
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("Thank you for your business!", 105, notesY + 47, { align: "center" })
  }

  // Add footer
  addFooter(doc)

  return doc.output("blob")
}

// Estimate PDF - Clean Modern Style
function generateEstimatePDF(data) {
  const doc = new jsPDF()

  // Header with accent color
  doc.setFillColor(100, 100, 140) // Slate blue
  doc.rect(0, 0, 210, 40, "F")

  // Title
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont(undefined, "bold")
  doc.text("ESTIMATE", 20, 25)

  // Estimate ID
  doc.setFontSize(14)
  doc.text(`Estimate# ${data.id.split("-")[2] || "1673"}`, 20, 35)
  doc.setFont(undefined, "normal")

  // Company information (top right)
  doc.setFontSize(12)
  doc.text("Studio 1:1 Construction LTD", 130, 15)
  doc.setFontSize(9)
  doc.text("P.O Box 95552-80106, Mombasa, Kenya", 130, 22)
  doc.text("P051811124R", 130, 28)

  // Status indicator
  const status = data.status || "Draft"
  doc.setFillColor(240, 240, 250) // Light blue/purple background for status
  doc.rect(130, 40, 70, 10, "F")
  doc.setTextColor(100, 100, 140) // Slate blue text for status
  doc.setFontSize(10)
  doc.text(`STATUS: ${status.toUpperCase()}`, 135, 47)

  // Reset text color
  doc.setTextColor(40, 40, 40)

  // Client information
  doc.setFillColor(245, 245, 245)
  doc.rect(10, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("CLIENT", 15, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.client || "Client Name", 15, 70)
  doc.text("Client Address Line 1", 15, 77)
  doc.text("Client Address Line 2", 15, 84)

  // Estimate details
  doc.setFillColor(245, 245, 245)
  doc.rect(110, 50, 90, 40, "F")
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("ESTIMATE DETAILS", 115, 60)
  doc.setFont(undefined, "normal")
  doc.setFontSize(9)

  // Two-column layout for details
  doc.text("Date:", 115, 70)
  doc.text(data.date || new Date().toLocaleDateString(), 175, 70, { align: "right" })

  doc.text("Expiry Date:", 115, 77)
  doc.text(data.expiryDate || new Date(new Date().setDate(new Date().getDate() + 30)).toLocaleDateString(), 175, 77, {
    align: "right",
  })

  doc.text("Project:", 115, 84)
  doc.text(data.project || "Project Name", 175, 84, { align: "right" })

  // Description
  doc.setFontSize(11)
  doc.setFont(undefined, "bold")
  doc.text("DESCRIPTION", 15, 100)
  doc.setFont(undefined, "normal")
  doc.setFontSize(10)
  doc.text(data.description || "Estimate for construction services", 15, 110)

  // Items table
  if (data.items && data.items.length > 0) {
    doc.setFontSize(12)
    doc.setFont(undefined, "bold")
    doc.text("ESTIMATE ITEMS", 105, 130, { align: "center" })
    doc.setFont(undefined, "normal")

    // Table header
    const tableColumn = ["#", "Item", "Description", "Quantity", "Unit Price", "Total"]

    // Format the rows
    const tableRows = data.items.map((item, index) => {
      const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
      const total = item.quantity * price

      return [
        (index + 1).toString(),
        item.name,
        item.description || "",
        item.quantity.toString(),
        price.toLocaleString(),
        total.toLocaleString(),
      ]
    })

    // Use autoTable
    autoTable(doc, {
      startY: 135,
      head: [tableColumn],
      body: tableRows,
      theme: "grid",
      headStyles: {
        fillColor: [100, 100, 140],
        textColor: [255, 255, 255],
        fontStyle: "bold",
      },
      columnStyles: {
        0: { cellWidth: 10 }, // #
        1: { cellWidth: 30 }, // Item
        2: { cellWidth: 50 }, // Description
        3: { cellWidth: 20 }, // Quantity
        4: { cellWidth: 30 }, // Unit Price
        5: { cellWidth: 40 }, // Total
      },
      styles: {
        cellPadding: 5,
        fontSize: 9,
      },
    })

    // Calculate totals
    const subtotal = data.items.reduce((sum, item) => {
      const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
      return sum + item.quantity * price
    }, 0)

    const tax = subtotal * 0.1 // Assuming 10% tax
    const total = subtotal + tax

    // Add totals section
    const finalY = doc.lastAutoTable.finalY + 10

    // Totals box
    doc.setFillColor(245, 245, 245)
    doc.rect(120, finalY, 80, 40, "F")

    doc.setFontSize(10)
    doc.text("Subtotal:", 125, finalY + 10)
    doc.text("Tax (10%):", 125, finalY + 20)
    doc.text("Total:", 125, finalY + 30)

    doc.text(`KES ${subtotal.toLocaleString()}`, 190, finalY + 10, { align: "right" })
    doc.text(`KES ${tax.toLocaleString()}`, 190, finalY + 20, { align: "right" })
    doc.setFont(undefined, "bold")
    doc.text(`KES ${total.toLocaleString()}`, 190, finalY + 30, { align: "right" })
    doc.setFont(undefined, "normal")

    // Notes
    const notesY = finalY + 50
    doc.setFontSize(11)
    doc.setFont(undefined, "bold")
    doc.text("NOTES & TERMS", 15, notesY)
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text("1. This is an estimate, not an invoice. Actual costs may vary.", 15, notesY + 10)
    doc.text("2. This estimate is valid for 30 days from the date of issue.", 15, notesY + 17)
    doc.text("3. Payment terms: 50% deposit upon acceptance, 50% upon completion.", 15, notesY + 24)
    doc.text("4. Changes to the scope of work may result in additional charges.", 15, notesY + 31)

    // Acceptance section
    const acceptanceY = notesY + 45
    doc.setFontSize(11)
    doc.setFont(undefined, "bold")
    doc.text("ACCEPTANCE", 15, acceptanceY)
    doc.setFont(undefined, "normal")
    doc.setFontSize(9)
    doc.text("To accept this estimate, please sign below and return a copy to us.", 15, acceptanceY + 10)

    // Signature lines
    doc.text("Client Signature: _______________________", 15, acceptanceY + 25)
    doc.text("Date: _______________", 15, acceptanceY + 35)

    doc.text("Company Representative: _______________________", 115, acceptanceY + 25)
    doc.text("Date: _______________", 115, acceptanceY + 35)
  }

  // Add footer
  addFooter(doc)

  return doc.output("blob")
}

function generateItemsTable(doc, items, startY) {
  const tableColumn = ["Item", "Description", "Quantity", "Price", "Total"]
  const tableRows = items.map((item) => {
    const price = typeof item.price === "string" ? Number.parseFloat(item.price.replace("$", "")) : item.price
    return [
      item.name,
      item.description || "",
      item.quantity,
      typeof item.price === "string" ? item.price : `$${price.toFixed(2)}`,
      `$${(item.quantity * price).toFixed(2)}`,
    ]
  })

  autoTable(doc, {
    startY,
    head: [tableColumn],
    body: tableRows,
    theme: "grid",
    headStyles: { fillColor: [66, 66, 66] },
    margin: { top: startY },
  })
}
